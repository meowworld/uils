public class ExcelUtil{

	private static final ThreadLocal<SimpleDateFormat> THREAD_HOLDER = ThreadLocal.withInitial(() -> new SimpleDateFormat("yyyy/MM/dd"));

	/**
	 * 设置日期格式
	 * @param format
	 */
	private static void setFormat(String format) {
		THREAD_HOLDER.get().applyPattern(format);
	}

	/**
	 * 将日期解析为字符串，使用默认格式
	 * @param date
	 */
	public static String format(Date date) {
		return THREAD_HOLDER.get().format(date);
	}

	/**
	 * 将日期解析为字符串，使用指定格式
	 * @param date
	 */
	public static String format(Date date, String format) {
		setFormat(format);
		return THREAD_HOLDER.get().format(date);
	}

	/**
	 * 将字符串解析为日期，使用默认格式
	 * @param dateStr
	 */
	public static Date parse(String dateStr) {
		Date date = null;
		try {
			date = THREAD_HOLDER.get().parse(dateStr);
		} catch (ParseException e) {
			logger.error("parse date error", e);
		}
		return date;
	}

	/**
	 * 将字符串解析为日期，使用指定格式
	 * @param dateStr
	 * @param format  日期格式
	 */
	public static Date parse(String dateStr, String format) {
		setFormat(format);
		Date date = null;
		try {
			date = THREAD_HOLDER.get().parse(dateStr);
		} catch (ParseException e) {
			logger.error("parse date error", e);
		}
		return date;
	}

	/**
	 * 将字符串解析为日期，使用指定格式
	 * @param dateStr
	 */
	public static Date parseWithoutDelimiter(String dateStr) {
		StringBuilder builder = new StringBuilder(dateStr);
		builder.insert(4, "/");
		builder.insert(7, "/");

		Date date = null;
		try {
			date = THREAD_HOLDER.get().parse(builder.toString());
		} catch (ParseException e) {
			logger.error("parse date error", e);
		}
		return date;
	}

	/**
	 *移除线程副本，防止内存溢出
	 */
	public static void remove() {
		THREAD_HOLDER.remove();
	}
}